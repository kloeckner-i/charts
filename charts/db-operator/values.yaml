nameOverride: ""

image:
  repository: ghcr.io/db-operator/db-operator
  pullPolicy: Always
  logLevel: info

# imagePullSecrets:
#   - name: myRegistrySecret

reconcileInterval: "60"
# watchNamespace value is comma-separated list of namespace names. It's necessary to set "" to watch cluster wide.
watchNamespace: ""
# ------------------------------------------------------------
# -- If set to true, db-operator will check if a Kubernetes
# --   objects were changes before running database queries.
# -- It might reduce the amount of queries, because otherwise
# --  db-operator will try to update database and users every
# --  ${RECONCILE_INTERVAL} seconds.
# ------------------------------------------------------------
# -- NOTE: Currently, it's only working with Database Users
# ------------------------------------------------------------
checkForChanges: false

rbac:
  create: true

serviceAccount:
  create: true

crds:
  install: true
  keep: true
  annotations: {}

webhook:
  enabled: true
  serviceAccount:
    create: true
  names:
    mutating: db-operator-mutating-webhook-configuration
    validating: db-operator-validating-webhook-configuration
  certificate:
    # --------------------------------------------
    # -- If you want to use an existing
    # --  secret for CA injection,
    # --  provide the secret name
    # --  and set `certificate.create` to `false`
    # --------------------------------------------
    create: true
    name: db-operator-webhook
    secretName: db-operator-webhook-cert
    issuer:
      create: true
      name: db-operator-issuer
      # -----------------------------------------
      # -- If you choose to create a new issuer
      # -- the `kind` field would be ignored
      # -- Use it only to reference an existing
      # -- ClusterIssuer or Issuer
      # -----------------------------------------
      kind: Issuer

security: {}
#  runAsUser: 1000
#  fsGroup: 1000

resources: {}

nodeSelector: {}

annotations: {}

podLabels: {}

affinity: {}

tolerations: []

config:
  instance:
    google:
      proxy:
        nodeSelector: {}
        image: ghcr.io/db-operator/db-auth-gateway:v0.1.10
        metricsPort: 9090
    generic: {}
    percona:
      proxy:
        image: severalnines/proxysql:2.0
        metricsPort: 9090
  backup:
    activeDeadlineSeconds: 600  # 10m
    nodeSelector: {}
    postgres:
      image: "kloeckneri/pgdump-gcs:latest"
    mysql:
      image: "kloeckneri/mydump-gcs:latest"
    resources:
      requests:
        memory: 64Mi
        cpu: 0.2
  monitoring:
    promPushGateway: ""
    nodeSelector: {}
    postgres:
      image: wrouesnel/postgres_exporter:latest
      queries:
        pg_stat_statements:
          query: "SELECT userid, pgss.dbid, pgdb.datname, queryid, query, calls, total_time, mean_time, rows FROM pg_stat_statements pgss LEFT JOIN (select oid as dbid, datname from pg_database) as pgdb on pgdb.dbid = pgss.dbid WHERE not queryid isnull ORDER BY mean_time desc limit 20"
          metrics:
            - userid:
                usage: "LABEL"
                description: "User ID"
            - dbid:
                usage: "LABEL"
                description: "database ID"
            - datname:
                usage: "LABEL"
                description: "database NAME"
            - queryid:
                usage: "LABEL"
                description: "Query unique Hash Code"
            - query:
                usage: "LABEL"
                description: "Query class"
            - calls:
                usage: "COUNTER"
                description: "Number of times executed"
            - total_time:
                usage: "COUNTER"
                description: "Total time spent in the statement, in milliseconds"
            - mean_time:
                usage: "GAUGE"
                description: "Mean time spent in the statement, in milliseconds"
            - rows:
                usage: "COUNTER"
                description: "Total number of rows retrieved or affected by the statement"

secrets:
  gsql: {}

serviceMonitor:
  enabled: false
#   interval: 10s
#   scrapeTimeout: 10s
#   jobLabel: db-operator
#   selector:
#    prometheus: my-prometheus
#  ## metric relabel configs to apply to samples before ingestion.
#  ##
#  metricRelabelings:
#    - sourceLabels: [__meta_kubernetes_service_label_cluster]
#      targetLabel: cluster
#      regex: (.*)
#      replacement: ${1}
#      action: replace
#  ## relabel configs to apply to samples after ingestion.
#  ##
#  relabelings:
#    - sourceLabels: [__meta_kubernetes_pod_node_name]
#      separator: ;
#      regex: ^(.*)$
#      targetLabel: nodename
#      replacement: $1
#      action: replace

service:
  annotations: {}
  type: ClusterIP
  port: 8080

# ---------------------------------------------------------------------
# -- These values are used in tests, they should not affect users
# ---------------------------------------------------------------------
tests:
  gsql:
    enabled: false
